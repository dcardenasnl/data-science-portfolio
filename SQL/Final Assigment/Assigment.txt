Data Scientist Role Play: Profiling and Analyzing the Yelp
Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of
questions that will help you profile and understand the data just like a data
scientist would. For this first part of the assignment, you will be assessed
both on the correctness of your findings, as well as the code you used to
arrive at your answer. You will be graded on how easy your code is to read,
so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own
inferences and analysis of the data for a particular research question you want
to answer. You will be required to prepare the dataset for the analysis you
choose to do. As with the first part, you will be graded, in part, on how easy
your code is to read, so use proper formatting and comments to illustrate
and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the
questions you are being asked, and your job will be to transfer your answers
and SQL coding where indicated into this worksheet so that your peers can
review your work. You should be able to use any Text Editor (Windows Notepad,
Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers.
If you are going to use Word or some other page layout application, just be
careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains
intact for you reviewer.

---------------------------

Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:

i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000

SELECT COUNT(*)
FROM attribute

----

2. Find the total distinct records by either the foreign key or primary key
for each table. If two foreign keys are listed in the table, please specify
 which foreign key.

Notation;
	- PK: Primary Key
	- FK: Foreign Key

                |  PK[id]  | FK[business_id] |  FK[user_id]
i. Business     =  10000   |                 |
ii. Hours       =          |      1562       |
iii. Category   =          |      2643       |
iv. Attribute   =          |      1115       |
v. Review       =  10000   |      8090       |  9581
vi. Checkin     =          |      493        |
vii. Photo      =  10000   |      6493       |
viii. Tip       =          |      3979       |  537
ix. User        =  10000   |                 |
x. Friend       =          |                 |  11
xi. Elite_years =          |                 |  2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.

SELECT COUNT(DISTINCT(<COLUMN>))
FROM <TABLE>

----

3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

Answer: No

	SELECT COUNT(*)
	FROM User
	WHERE id is null
	OR name is null
	OR review_count is null
	OR yelping_since is null
	OR useful is null
	OR funny is null
	OR cool is null
	OR fans is null
	OR average_stars is null
	OR compliment_hot is null
	OR compliment_more is null
	OR compliment_profile is null
	OR compliment_cute is null
	OR compliment_list is null
	OR compliment_note is null
	OR compliment_plain is null
	OR compliment_cool is null
	OR compliment_funny is null
	OR compliment_writer is null
	OR compliment_photos is null

----

4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

SELECT MIN(<COLUMN>), MAX(<COLUMN>), AVG(<COLUMN>)
FROM <TABLE>

	i. Table: Review, Column: Stars

		min:1		max:5		avg:3.7082


	ii. Table: Business, Column: Stars

		min:1.0		max:5.0		avg:3.6549


	iii. Table: Tip, Column: Likes

		min:0		max:2		avg:0.0144


	iv. Table: Checkin, Column: Count

		min:1		max:53		avg:1.9414


	v. Table: User, Column: Review_count

		min:0		max:2000		avg:24.2995

----

5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

	-- OBTAINING LIST
  SELECT
	  city,
	  SUM(review_count) as num_revies
	FROM business
	GROUP By city
	ORDER BY num_revies DESC

  +-----------------+------------+
  | city            | num_revies |
  +-----------------+------------+
  | Las Vegas       |      82854 |
  | Phoenix         |      34503 |
  | Toronto         |      24113 |
  | Scottsdale      |      20614 |
  | Charlotte       |      12523 |
  | Henderson       |      10871 |
  | Tempe           |      10504 |
  | Pittsburgh      |       9798 |
  | Montréal        |       9448 |
  | Chandler        |       8112 |
  | Mesa            |       6875 |
  | Gilbert         |       6380 |
  | Cleveland       |       5593 |
  | Madison         |       5265 |
  | Glendale        |       4406 |
  | Mississauga     |       3814 |
  | Edinburgh       |       2792 |
  | Peoria          |       2624 |
  | North Las Vegas |       2438 |
  | Markham         |       2352 |
  | Champaign       |       2029 |
  | Stuttgart       |       1849 |
  | Surprise        |       1520 |
  | Lakewood        |       1465 |
  | Goodyear        |       1155 |
  +-----------------+------------+
  (Output limit exceeded, 25 of 362 total rows shown)

----

6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
	SELECT CASE
	WHEN  stars < 1 THEN 0
	WHEN  stars >= 1 AND stars < 2 THEN 1
	WHEN  stars >= 2 AND stars < 3 THEN 2
	WHEN  stars >= 3 AND stars < 4 THEN 3
	WHEN  stars >= 4 AND stars < 5 THEN 4
	ELSE 5
	END as Star_rating,
	COUNT(*) as 'StarCount'
	FROM business
	WHERE city == 'Avon'
	GROUP BY Star_rating

Copy and Paste the Resulting Table Below (2 columns � star rating and count):
+-------------+-----------+
| Star_rating | StarCount |
+-------------+-----------+
|           1 |         1 |
|           2 |         2 |
|           3 |         3 |
|           4 |         3 |
|           5 |         1 |
+-------------+-----------+

ii. Beachwood

SQL code used to arrive at answer:
SELECT CASE
  WHEN  stars < 1 THEN 0
  WHEN  stars >= 1 AND stars < 2 THEN 1
  WHEN  stars >= 2 AND stars < 3 THEN 2
  WHEN  stars >= 3 AND stars < 4 THEN 3
  WHEN  stars >= 4 AND stars < 5 THEN 4
  ELSE 5
  END as Star_rating,
  COUNT(*) as 'StarCount'
FROM business
WHERE city == 'Beachwood'
GROUP BY Star_rating

Copy and Paste the Resulting Table Below (2 columns � star rating and count):
+-------------+-----------+
| Star_rating | StarCount |
+-------------+-----------+
|           2 |         2 |
|           3 |         4 |
|           4 |         3 |
|           5 |         5 |
+-------------+-----------+

----

7. Find the top 3 users based on their total number of reviews:

	SQL code used to arrive at answer:

	SELECT name,
	  review_count -- // integer, number of reviews
	FROM User
	ORDER BY review_count DESC
	LIMIT 3

	Copy and Paste the Result Below:

	+--------+--------------+
	| name   | review_count |
	+--------+--------------+
	| Gerald |         2000 |
	| Sara   |         1629 |
	| Yuri   |         1339 |
	+--------+--------------+

----

8. Does posing more reviews correlate with more fans?

	SELECT name,
	  fans, --// integer, number of fans the user has
	  review_count -- // integer, number of reviews
	FROM User
	ORDER BY review_count DESC

	Please explain your findings and interpretation of the results:

	YES. Obtaining results sorting by number of reviews and fans in descending
	and ascending order, we can observe that the user with more reviews tends
	to presents more number of fans	in comparison with other with lower reviews.
	In conclusion, there is a correlation.

----

9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: There are more revies with "love".
  Love has 1780 reviews and hate has 232 reviews


	SQL code used to arrive at answer:
SELECT COUNT(*)
FROM review
WHERE text LIKE '%love%

----

10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:

  SELECT name, fans
  FROM user
  ORDER BY fans DESC
  LIMIT 10

	Copy and Paste the Result Below:
  +-----------+------+
  | name      | fans |
  +-----------+------+
  | Amy       |  503 |
  | Mimi      |  497 |
  | Harald    |  311 |
  | Gerald    |  253 |
  | Christine |  173 |
  | Lisa      |  159 |
  | Cat       |  133 |
  | William   |  126 |
  | Fran      |  124 |
  | Lissa     |  120 |
  +-----------+------+

----

11. Is there a strong relationship (or correlation) between having a high
number of fans and being listed as "useful" or "funny?"
Out of the top 10 users with the highest number of fans,
what percent are also listed as �useful� or �funny�?

  Key:
  0% - 25% - Low relationship
  26% - 75% - Medium relationship
  76% - 100% - Strong relationship

	SQL code used to arrive at answer:

  SELECT
    CAST(SUM(fans) AS float)*100/(SELECT SUM(fans) FROM user) as '%fans',
    CAST(SUM(useful) AS float)*100/(SELECT SUM(useful) FROM user) as '%useful',
    CAST(SUM(funny) AS float)*100/(SELECT SUM(funny) FROM user) as '%funny'
  FROM user
  WHERE fans >= 120

	Copy and Paste the Result Below:
  +---------------+--------------+---------------+
  |         %fans |      %useful |        %funny |
  +---------------+--------------+---------------+
  | 16.1049946294 | 44.550048218 | 61.2611776854 |
  +---------------+--------------+---------------+


  Please explain your findings and interpretation of the results:
We can observe that the TOP10 GROUP tend to group a big part of the useful and
funny comment that all other user with lower fans. This way there is a relationship.
44% are listed as useful and 61 listed as funny.

----------------------------------

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that
 city or category by their overall star rating.
 Compare the businesses with 2-3 stars to the businesses with 4-5 stars
and answer the following questions. Include your code.

CITY: TORONTO.
CATEGORY: Restaurants

--

i. Do the two groups you chose to analyze have a different distribution of hours?

YES. Simple view shows that business with "2-3" stars tends to have more hours
opened. Besides, "4-5" business open later most frequently.tly.

--

ii. Do the two groups you chose to analyze have a different number of reviews?

YES, simple view shows that in general "4-5" business has in average more reviews.

--

iii. Are you able to infer anything from the location data provided between
these two groups? Explain.

"4-5" business tends to work in an specify part of the day. In general people
in Toronto eats later in the day and are more concentrated in the afternoon.
"4-5" Night business open just in night and seems to be more focus on night food
in comparison with "2-3" who open in the morning. Stars are not strongly
correlated with the number of reviews.

SQL code used for analysis:

SELECT COUNT(*) as bcount,
  trim(hours, 'Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday|') as hour_day,
  AVG(review_count) as AVG_reviews,
  CASE
    WHEN  stars < 1 THEN '[0,1['
    WHEN  stars >= 1 AND stars < 2 THEN '[1,2['
    WHEN  stars >= 2 AND stars < 3 THEN '[2,3['
    WHEN  stars >= 3 AND stars < 4 THEN '[3,4['
    WHEN  stars >= 4 AND stars < 5 THEN '[4,5['
    ELSE '[5]'
  END as Stars_R
FROM business b
  LEFT JOIN hours h ON b.id == h.business_id
  LEFT JOIN category c ON b.id == c.business_id
WHERE HOURS not null
  AND city == 'Toronto'
  AND category == 'Restaurants'
  AND (Stars_R=='[2,3[' OR Stars_R=='[4,5[')
GROUP BY hour_day
ORDER BY hour_day DESC

+--------+-------------+---------------+---------+
| bcount | hour_day    |   AVG_reviews | Stars_R |
+--------+-------------+---------------+---------+
|      4 | 18:00-2:00  |          26.0 | [4,5[   |
|      4 | 18:00-23:00 |          89.0 | [4,5[   |
|      3 | 16:00-2:00  |          26.0 | [4,5[   |
|      1 | 14:00-23:00 |           8.0 | [4,5[   |
|      1 | 12:00-16:00 |          89.0 | [4,5[   |
|     13 | 11:00-23:00 | 6.38461538462 | [2,3[   |
+--------+-------------+---------------+---------+

----------

2. Group business based on the ones that are open and the ones that are closed.
 What differences can you find between the ones that are still open and the
 ones that are closed? List at least two differences and the SQL
 code you used to arrive at your answer.

i. Difference 1:

Highest stars tend to become closed more often.  The percent of "5-star" local
closed per total closed business duplicate the percent of "5-start" opened
per open business.

ii. Difference 2:

Closed business presents more reviews in average, probably because most of the
open business are news and not popular.
In particular "3-4" closed business were more reviewed than other, now the
number of reviews are more equally distributed (peak of 35% of the review to 24%).

SQL code used for analysis:
SELECT
  is_open,
  CASE
    WHEN  stars < 1 THEN '[0,1['
    WHEN  stars >= 1 AND stars < 2 THEN '[1,2['
    WHEN  stars >= 2 AND stars < 3 THEN '[2,3['
    WHEN  stars >= 3 AND stars < 4 THEN '[3,4['
    WHEN  stars >= 4 AND stars < 5 THEN '[4,5['
    ELSE '[5]'
  END as Stars_R,
  COUNT(*) as N_bissness,
  CASE
    WHEN is_open==0 THEN ROUND(CAST(COUNT(*) AS float)*100/(SELECT COUNT(*) FROM business WHERE is_open==0 AND city == 'Toronto'),2)
    ELSE ROUND(CAST(COUNT(*) AS float)*100/(SELECT COUNT(*) FROM business WHERE is_open<>0 AND city == 'Toronto'),2)
  END AS '%Business',
  ROUND(AVG(review_count),2) as Avg_r,
  MAX(review_count) as Max_r,
  MIN(review_count) as Min_r
FROM business
WHERE city == 'Toronto'
GROUP BY is_open, Stars_R

+---------+---------+------------+-----------+-------+-------+-------+
| is_open | Stars_R | N_bissness | %Business | Avg_r | Max_r | Min_r |
+---------+---------+------------+-----------+-------+-------+-------+
|       0 | [1,2[   |          5 |      2.54 |   3.8 |     6 |     3 |
|       0 | [2,3[   |         41 |     20.81 | 16.41 |    83 |     3 |
|       0 | [3,4[   |         77 |     39.09 | 24.83 |   201 |     3 |
|       0 | [4,5[   |         63 |     31.98 | 21.71 |   183 |     3 |
|       0 | [5]     |         11 |      5.58 |  5.73 |    11 |     3 |
|       1 | [1,2[   |         29 |      3.68 |  5.21 |    14 |     3 |
|       1 | [2,3[   |        118 |     14.97 |  12.6 |   128 |     3 |
|       1 | [3,4[   |        276 |     35.03 | 35.94 |   778 |     3 |
|       1 | [4,5[   |        282 |     35.79 | 27.77 |   511 |     3 |
|       1 | [5]     |         83 |     10.53 |  8.29 |    62 |     3 |
+---------+---------+------------+-----------+-------+-------+-------+

3. For this last part of your analysis, you are going to choose the type of
analysis you want to conduct on the Yelp dataset and are going to prepare
the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes
for sentiment analysis, clustering businesses to find commonalities or
anomalies between them, predicting the overall star rating for a business,
 predicting the number of fans a user will have, and so on.
These are just a few examples to get you started, so feel free to be creative
and come up with your own problem you want to solve. Provide answers, in-line,
to all of the following:

i. Indicate the type of analysis you chose to do:

A business owner is considering offer discounts on the internet in order to increase
the number of clients. He is interested in knowing when is a good moment to start offering
discounts. Besides he is interested in the best city to start a new business that
offers discounts.

ii. Write 1-2 brief paragraphs on the type of data you will need for your
analysis and why you chose that data:

The text has to be analysed in order to detect which comment is related to a
discount, this way we will use some keywords as (discount, groupon, coupon).
Also, it is important to group the date of the reviews in order the answer the
"When" question. I decided to detect the best months to offer a discount,
this way it is necessary to extract the month from the date info. Besides,
I think that the classification of comments would be useful to detect the
best moment..

Finally, in order to find cities where people are most interested in the discount,
each review has to be related to the business city.  For this purpose, the reviews
table has to be joined with the business table.

iii. Output of your finished dataset:

+-------+-------+----------+---------+---------+----------+------+
| month | num_b | avg_star | avg_use | avg_fun | avg_cool | city |
+-------+-------+----------+---------+---------+----------+------+
| 01    |    23 |     3.61 |    2.04 |    0.65 |     0.96 | None |
| 02    |    22 |     3.55 |    2.45 |    0.86 |     1.09 | None |
| 03    |    19 |     3.58 |    5.47 |    3.53 |     4.47 | None |
| 04    |    24 |     3.29 |     1.5 |    0.67 |     0.75 | None |
| 05    |    24 |      3.0 |     1.0 |    0.08 |     0.21 | None |
| 06    |    25 |      3.6 |    1.24 |    0.28 |      0.4 | None |
| 07    |    16 |     3.25 |    0.88 |    0.25 |     0.69 | None |
| 08    |    18 |     3.06 |    1.22 |    0.56 |     0.56 | None |
| 09    |    14 |     3.86 |    1.07 |    0.07 |     0.21 | None |
| 10    |    14 |      3.5 |    1.36 |    0.36 |      0.5 | None |
| 11    |    15 |      3.6 |     2.4 |    1.33 |     2.13 | None |
| 12    |    15 |     3.07 |    0.67 |     0.2 |      0.4 | None |
+-------+-------+----------+---------+---------+----------+------+

Clearly, the first semester is the best moment to offer discounts.
However, there is not enough information to determine the best city where offer discounts.

iv. Provide the SQL code you used to create your final dataset:

SELECT
  strftime('%m',r.date) as month,
  COUNT(*) as num_b,
  ROUND(AVG(r.stars),2) as avg_star,
  ROUND(AVG(r.useful),2) as avg_use,
  ROUND(AVG(r.funny),2) as avg_fun,
  ROUND(AVG(r.cool),2) as avg_cool,
  b.city
FROM review r LEFT JOIN business b ON r.business_id==b.id
WHERE (r.text LIKE '%groupon%'
  OR r.text LIKE '%coupon%'
  OR r.text LIKE '%discount%'
  )
GROUP BY month
